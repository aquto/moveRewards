/*!
 * Aquto Move Rewards v0.1.0 <http://aquto.com>
 */
'use strict'

var jsonp = require('browser-jsonp')
var sharedCallback = require('./sharedCallback').sharedCallback
var utils = require('./utils')

/** instantiate moveRewards object */
var moveRewards = {}

/** Check if Aquto backend hostname has been passed in */
var scriptParams = utils._parseScriptQuery(document.getElementById('aquto-api'))
var be = scriptParams.be || 'app.aquto.com'
// testing - remove when done
be = 'mp-dev.aquto.internal'
// var ow = scriptParams.ow || 'ow.aquto.com'

/**
 * Check eligibility for the current device
 * Campaign id is used to determine configured reward, and operator
 *
 * @param {String} campaignId Aquto campaign id
 * @param {function} callback Callback function on success or error
 * @param {String} [phoneNumber] The phone number of the subscriber
 * @param {String} [publisherSiteUuid] Optional publisherSiteUuid of the inventory (generated by Aquto)
 * @param {String} [channel] Optional channel of the inventory
 *
 */
function checkEligibility(options) {
    if (options && options.campaignId) {
        var data = { apiVersion: 'v8' }
        if(options.phoneNumber) {
            data.phoneNumber = options.phoneNumber
        }
        if(options.publisherSiteUuid) {
            data.publisherSiteUuid = options.publisherSiteUuid
        }
        if(options.channel) {
            data.channel = options.channel
        }
        jsonp({
            url: '//' + be + '/api/campaign/datarewards/identifyandcheck/'+options.campaignId,
            callbackName: 'jsonp',
            data: data,
            success: function(response) {
                sharedCallback(response, options.callback)
            },
            error: function(response) {
                sharedCallback(response, options.callback)
            }
        })
    }
}

/**
 * Check eligibility for the current device
 * Campaign id is used to determine configured reward, and operator
 *
 * @param {String} campaignId Aquto campaign id
 * @param {function} callback Callback function on success or error
 * @param {String} [phoneNumber] The phone number of the subscriber
 * @param {String} [publisherSiteUuid] Optional publisherSiteUuid of the inventory (generated by Aquto)
 * @param {String} [channel] Optional channel of the inventory
 *
 */

function checkAppEligibility(options) {
    if (options && options.campaignId) {
        var data = { apiVersion: 'v8' }
        if(options.phoneNumber) {
            data.phoneNumber = options.phoneNumber
        }
        if(options.publisherSiteUuid) {
            data.publisherSiteUuid = options.publisherSiteUuid
        }
        if(options.channel) {
            data.channel = options.channel
        }

        jsonp({
            url: '//' + be + '/api/campaign/datarewards/eligibility/' + options.campaignId,
            callbackName: 'jsonp',
            data: data,
            success: function(response) {
                sharedCallback(response, options.callback)
            },
            error: function(response) {
                sharedCallback(response, options.callback)
            }
        })
    }
}
/*--------------------------------------------------------------------------*/

/*--------------------------------------------------------------------------*/

/**
 * The semantic version number.
 *
 * @static
 * @memberOf _
 * @type String
 */
moveRewards.VERSION = '0.1.0'

// assign eligibility static methods
moveRewards.checkEligibility = checkEligibility
moveRewards.checkAppEligibilityPhoneEntry = checkAppEligibility

// helper functions
moveRewards.utils = utils

/*--------------------------------------------------------------------------*/

module.exports = moveRewards
