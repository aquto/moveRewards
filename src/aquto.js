/*!
 * Aquto Move Rewards v0.1.0 <http://aquto.com>
 */
'use strict'

var jsonp = require('browser-jsonp')
var sharedCallback = require('./sharedCallback').sharedCallback
var voucherCallback = require('./sharedCallback').voucherCallback
var completeCallback = require('./sharedCallback').completeCallback
var utils = require('./utils')

/** instantiate moveRewards object */
var moveRewards = {}

/** Check if Aquto backend hostname has been passed in */
var scriptParams = utils._parseScriptQuery(document.getElementById('aquto-api'))
var be = scriptParams.be || 'app.aquto.com'
var ow = scriptParams.ow || 'ow.aquto.com'


/**
 * Check eligibility for the current device
 * Campaign id is used to determine configured reward, and operator
 *
 * @param {String} campaignId Aquto campaign id
 * @param {function} callback Callback function on success or error
 * @param {String} [phoneNumber] The phone number of the subscriber
 * @param {String} [publisherSiteUuid] Optional publisherSiteUuid of the inventory (generated by Aquto)
 * @param {String} [channel] Optional channel of the inventory
 *
 */
function checkEligibility(options) {
  if (options && options.campaignId) {
    var data = { apiVersion: 'v8' }
    if(options.phoneNumber) {
      data.phoneNumber = options.phoneNumber
    }
    if(options.publisherSiteUuid) {
      data.publisherSiteUuid = options.publisherSiteUuid
    }
    if(options.channel) {
      data.channel = options.channel
    }
    jsonp({
      url: '//' + be + '/api/campaign/datarewards/identifyandcheck/'+options.campaignId,
      callbackName: 'jsonp',
      data: data,
      success: function(response) {
        sharedCallback(response, options.callback)
      },
      error: function(response) {
        sharedCallback(response, options.callback)
      }
    })
  }
}

/**
 * Check eligibility for the current device
 * Doesn't require a campaignId
 *
 * @param {function} callback Callback function on success or error
 * @param {String} [phoneNumber] The phone number of the subscriber
 *
 */
function genericCheckEligibility(options) {
  var data = { apiVersion: 'v8' }
  if(options.phoneNumber) {
    data.phoneNumber = options.phoneNumber
  }
  jsonp({
    url: '//' + be + '/api/datarewards/eligibility',
    callbackName: 'jsonp',
    data: data,
    success: function(response) {
      if (options.callback &&  typeof options.callback === 'function') {
        options.callback(response.response)
      }
    }
  })
}

/**
 * Check if user is eligible for the Aquto Offer Wall
 *
 * @param {function} callback Callback function on success or error
 * @param {String} [carrier] The phone number of the subscriber
 *
 */
function checkOfferWallEligibility(options) {
  var data = { apiVersion: 'v8' }
  if(options.carrier) {
    data.operatorCode = options.carrier
  }
  if(options.phoneNumber) {
    data.phoneNumber = options.phoneNumber
  }
  if(options.countryCode) {
    data.countryCode = options.countryCode
  }
  if(options.publisherSiteUuid) {
    data.publisherSiteUuid = options.publisherSiteUuid
  }
  if(options.channel) {
    data.publisherSiteUuid = options.channel
  }

  jsonp({
    url: '//' + be + '/api/datarewards/offerwall/eligibility',
    callbackName: 'jsonp',
    data: data,
    success: function(response) {
      if (options.callback &&  typeof options.callback === 'function') {
        if (response.response.eligible) {
          var offerWallHref = '//' + ow + '/?opCode=' + response.response.opCode + '&'
          if(options.phoneNumber) {
            offerWallHref = offerWallHref + 'pn=' + options.phoneNumber + '&'
          }
          if(options.publisherSiteUuid) {
            offerWallHref = offerWallHref + 'publisherSiteUuid=' + options.publisherSiteUuid + '&'
          }
          if(options.channel) {
            offerWallHref = offerWallHref + 'channel=' + options.channel + '&'
          }

          options.callback({
            eligible: true,
            offerWallHref: offerWallHref,
            numberOfOffers: response.response.offerCount
          })
        } else {
          options.callback({
            eligible: false,
            identified: !!(response.response && response.response.opCode !== 'unknown'),
            numberOfOffers: 0
          })
        }
      }
    }
  })
}

/**
 * Check eligibility for the current device
 * Campaign id is used to determine configured reward, and operator
 *
 * @param {String} campaignId Aquto campaign id
 * @param {function} callback Callback function on success or error
 * @param {String} [phoneNumber] The phone number of the subscriber
 * @param {String} [publisherSiteUuid] Optional publisherSiteUuid of the inventory (generated by Aquto)
 * @param {String} [channel] Optional channel of the inventory
 *
 */
function checkAppEligibility(options) {
  if (options && options.campaignId) {
    var data = { apiVersion: 'v8' }
    if(options.phoneNumber) {
      data.phoneNumber = options.phoneNumber
    }
    if(options.publisherSiteUuid) {
      data.publisherSiteUuid = options.publisherSiteUuid
    }
    if(options.channel) {
      data.channel = options.channel
    }

    jsonp({
      url: '//' + be + '/api/campaign/datarewards/eligibility/' + options.campaignId,
      callbackName: 'jsonp',
      data: data,
      success: function(response) {
        sharedCallback(response, options.callback)
      },
      error: function(response) {
        sharedCallback(response, options.callback)
      }
    })
  }
}

/**
 * Check eligibility for the current device
 * Campaign id is used to determine configured reward, and operator
 *
 * @param {String} campaignId Aquto campaign id
 * @param {function} callback Callback function on success or error
 * @param {String} phoneNumber The phone number of the subscriber
 *
 */
function checkVoucherEligibility(options) {
  if (options && options.campaignId) {
    var data = { apiVersion: 'v8', campaignId: options.campaignId }
    if(options.phoneNumber) {
      data.phoneNumber = options.phoneNumber
    }
    if(options.publisherSiteUuid) {
      data.publisherSiteUuid = options.publisherSiteUuid
    }
    if(options.channel) {
      data.channel = options.channel
    }

    jsonp({
      url: '//' + be + '/api/datarewards/voucher/eligibility',
      callbackName: 'jsonp',
      data: data,
      success: function(response) {
        sharedCallback(response, options.callback)
      },
      error: function(response) {
        sharedCallback(response, options.callback)
      }
    })
  }
}

/**
 * Check if a qualified user is eligible for a specific campaign
 *
 * @param {String} campaignId Aquto campaign id
 * @param {function} callback Callback function on success or error
 *
 */
function checkQualified(options) {
  if (options && options.campaignId) {
    var data = { apiVersion: 'v8' }

    jsonp({
      url: '//' + be + '/api/datarewards/webconvert/eligibility/'+options.campaignId,
      callbackName: 'jsonp',
      data: data,
      success: function(response) {
        sharedCallback(response, options.callback)
      },
      error: function(response) {
        sharedCallback(response, options.callback)
      }
    })
  }
}


/**
 * Complete the conversion for the last checkEligibility call
 * Campaign id is used to link with existing checkEligibility calls
 *
 * @param {String} campaignId Aquto campaign id
 * @param {function} callback Callback function on success or error
 *
 */
function complete(options) {
  if (options && options.campaignId) {
    var data = { apiVersion: 'v8' }
    if(options.userToken) {
      data.userToken = options.userToken
    }
    jsonp({
      url: '//' + be + '/api/campaign/datarewards/applyreward/'+options.campaignId,
      callbackName: 'jsonp',
      data: data,
      success: function(response) {
        sharedCallback(response, options.callback)
      },
      error: function(response) {
        sharedCallback(response, options.callback)
      }
    })
  }
}

/**
 * Redeem a voucher for an eligible user
 * Campaign id is used to link with existing checkVoucherEligibility
 *
 * @param {String} callback Callback function on success or error
 * @param {String} code Voucher code
 * @param {String} [userToken] User identifier received from eligibility request can be used instead of a phone number
 * @param {String} [phoneNumber] The phone number of the subscriber.
 *
 */
function redeemVoucher(options) {
  if (options && options.code) {
    var data = { apiVersion: 'v8', code: options.code }
    if(options.userToken) {
      data.userToken = options.userToken
    }
    if(options.phoneNumber) {
      data.phoneNumber = options.phoneNumber
    }
    if(options.publisherSiteUuid) {
      data.publisherSiteUuid = options.publisherSiteUuid
    }
    if(options.channel) {
      data.channel = options.channel
    }

    jsonp({
      url: '//' + be + '/api/datarewards/voucher/reward',
      callbackName: 'jsonp',
      data: data,
      success: function(response) {
        voucherCallback(response, options.callback)
      },
      error: function(response) {
        voucherCallback(response, options.callback)
      }
    })
  }
}

/**
 * Complete the conversion for a qualified user
 *
 * @param {String} campaignId Aquto campaign id
 * @param {String} callback Callback function on success or error
 *
 */
function completeQualified(options) {
  if (options && options.campaignId) {
    var data = { apiVersion: 'v8' }

    jsonp({
      url: '//' + be + '/api/datarewards/webconvert/reward/'+options.campaignId,
      callbackName: 'jsonp',
      data: data,
      success: function(response) {
        completeCallback(response, options.callback)
      },
      error: function(response) {
        completeCallback(response, options.callback)
      }
    })
  }
}

/*--------------------------------------------------------------------------*/

var defaultEligibleMessage = 'Complete the offer and receive $$rewardAmount$$MB'
var defaultRewardMessage = 'Congratulations! You have received $$rewardAmount$$MB'
var defaultJBoxOptions = {
  color: 'blue',
  position: {x: 'center', y: 'bottom'},
  offset: {x: 0, y: -10},
  // zoomIn, zoomOut, pulse, move, slide, flip, tada
  animation: {open: 'tada', close: 'zoomIn'},
  autoClose: 7000
}

/**
 * Replace placeholders in message. Parameters are surrounded by double dollar signs e.g. $$param1$$
 *
 * @param {String} text The text to replace placeholders in
 * @param {Object} params Named parameters to replace in message
 */
function replaceParams(text, params) {
  if (params) {
    for (var k in params) {
      text = text.replace('$$' + k + '$$', params[k])
    }
  }
  return text
}

/**
 * Show popup notice with specified message
 *
 * @param {String} message Message to display with optional parameter placeholders in format $$param1$$
 * @param {Object} params Named parameters to replace in message
 * @param {String} jBoxType Type of jBox notification, defaults to 'Notice'
 * @param {String} jBoxOptions jBox Options
 * @param {Object} response Optional response object from eligibility check or reward callback that will set $$rewardAmount$$ parameter
 */
function showNotice(options) {
  if (!window.jBox) {
    console.log("jBox is required to show notices")
  } else {
    var noticeOptions = toNoticeOptions(options)

    // https://stephanwagner.me/jBox/options
    var jBoxType = noticeOptions.jBoxType || 'Notice'
    var jBoxOptions = Object.assign({
      content: replaceParams(noticeOptions.message, noticeOptions.params),
    }, defaultJBoxOptions, noticeOptions.jBoxOptions)

    new jBox(jBoxType, jBoxOptions)
  }
}

/**
 * Show popup notice with specified message if user is eligible for campaign
 *
 * @param {String} campaignId Aquto campaign id
 * @param {String} message Message to display with optional parameter placeholders in format $$rewardAmount$$
 * @param {String} jBoxType Type of jBox notification, defaults to 'Notice'
 * @param {String} jBoxOptions jBox Options
 *
 */
function checkQualifiedAndNotify(options) {
  aquto.checkQualified({
    campaignId: options.campaignId,
    callback: function(response) {
      if (response && response.eligible) {
        showNotice(Object.assign({}, options, { response: response, defaultMessage: defaultEligibleMessage }))
      }
    }
  })
}

/**
 * Reward user if eligible for campaign and show popup notice with specified message
 *
 * @param {String} campaignId Aquto campaign id
 * @param {String} message Message to display with optional parameter placeholders in format $$rewardAmount$$
 * @param {String} jBoxType Type of jBox notification, defaults to 'Notice'
 * @param {String} jBoxOptions jBox Options
 *
 */
function completeQualifiedAndNotify(options) {
  aquto.completeQualified({
    campaignId: options.campaignId,
    callback: function(response) {
      if (response && response.success) {
        showNotice(Object.assign({}, options, { response: response, defaultMessage: defaultRewardMessage }))
      }
    }
  })
}

function toNoticeOptions(options) {
  var response = options.response

  // Set params if response object is available
  var responseParams = response && {
    rewardAmount: response.rewardAmount,
    carrier: response.carrier
  } || {}

  // Merge with other params if set
  var params = options.params ? Object.assign(responseParams, options.params) : responseParams

  // Add default message and the params
  return Object.assign({ message: options.defaultMessage }, options, { params: params })
}

/*--------------------------------------------------------------------------*/

/**
 * The semantic version number.
 *
 * @static
 * @memberOf _
 * @type String
 */
moveRewards.VERSION = '0.1.0'

// assign eligibility static methods
moveRewards.genericCheckEligibility = genericCheckEligibility
moveRewards.checkEligibility = checkEligibility
moveRewards.checkEligibilitySinglePage = checkAppEligibility
moveRewards.checkAppEligibility = checkAppEligibility
moveRewards.checkVoucherEligibility = checkVoucherEligibility
moveRewards.checkOfferWallEligibility = checkOfferWallEligibility
moveRewards.checkQualified = checkQualified

// assign redemption static methods
moveRewards.complete = complete
moveRewards.redeemVoucher = redeemVoucher
moveRewards.completeQualified = completeQualified

// helper functions
moveRewards.utils = utils

// show notice methods
moveRewards.checkQualifiedAndNotify = checkQualifiedAndNotify
moveRewards.completeQualifiedAndNotify = completeQualifiedAndNotify
moveRewards.showNotice = showNotice

/*--------------------------------------------------------------------------*/

module.exports = moveRewards
