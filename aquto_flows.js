var aqutoFlows =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/aquto.flows.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/aquto.flows.js":
/*!****************************!*\
  !*** ./src/aquto.flows.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/** instantiate moveRewards object */\nlet moveRewards = {}\n\nfunction checkAppEligibilityPhoneEntry(options) {\n    const phone = iti && iti.getNumber().replace('+', '');\n    createCopyOptions(options);\n    appendIframe(options.targetId);\n\n    aquto.checkAppEligibility({\n        campaignId: options.campaignId,\n        phoneNumber: phone || '5255469530272',\n        callback: function(response) {\n            if (response){\n                if (!response.identified){\n                    response.identified = !!(response.eligible && response.operatorCode !== 'unknown');\n                }\n                createCopyResponse(response);\n                if (response.identified) {\n                    if (response.eligible) {\n                        isEligible = true;\n                        if(phone){\n                            debug('phone entered eligible');\n                            count = 5;\n                            loading.classList.add('hide');\n                            phoneEntry.classList.remove('hide');\n                            phoneCheck.classList.add('hide');\n                            rewardTextEligible.innerHTML = response.rewardText;\n                            eligibleUI.classList.remove('hide');\n                        } else{\n                            debug('identified & eligible');\n                            loading.classList.remove('hide');\n                            redirectToTarget();\n                        }\n                    } else {\n                        iframe.classList.remove(\"hide\");\n                        isEligible = false;\n                        if (phone) {\n                            debug('phone entered ineligible');\n                            // count = 10;\n                            // ineligibleUI.classList.remove('hide');\n                            // phoneCheck.classList.add('hide');\n                        } else {\n                            debug('identified + ineligible');\n                            loading.classList.add('hide');\n                            phoneEntry.classList.remove('hide');\n                            phoneCheck.classList.add('hide');\n                            ineligibleUI.classList.remove('hide');\n                        }\n                    }\n                    if (phone) {\n                        timer.classList.remove('hide');\n                        setTimeout(countDown, 1000);\n                    }\n                } else {\n                    iframe.classList.remove(\"hide\");\n                    isEligible = false;\n                    if (phone){\n                        debug('phone entered unidentified');\n                        loading.classList.add('hide');\n                        phoneEntry.classList.remove('hide');\n                        phoneCheck.classList.add('hide');\n                        ineligibleUI.classList.remove('hide');\n                    } else {\n                        debug('unidentified');\n                        loading.classList.add('hide');\n                        phoneEntry.classList.remove('hide');\n                    }\n                }\n            } else {\n                debug('error.checkAppEligibility');\n                iframe.classList.remove(\"hide\");\n                loading.classList.add('hide');\n                errorElement.classList.remove('hide');\n            }\n        }\n    });\n}\n\n/*--------------------------------------------------------------------------*/\n\nmoveRewards.VERSION = '0.1.0';\nmoveRewards.checkAppEligibilityPhoneEntry = checkAppEligibilityPhoneEntry;\nmodule.exports = moveRewards;\n\n/*------------------------ GLOBAL VARIABLES ------------------------------------*/\n\nlet loading,\n    eligibleElement,\n    errorElement,\n    ineligibleMsgElement,\n    icon,\n    text,\n    phoneEntry,\n    eligibleUI,\n    ineligibleUI,\n    timer,\n    rewardTextEligible,\n    phoneCheck,\n    input,\n    iti,\n    copyOptions,\n    copyResponse,\n    isEligible,\n    iframe,\n    targetEl,\n    iframeTag,\n    peTitle,\n    peSubTitle,\n    peSubmitBtn,\n    redirectBtn,\n    ineligibleTitle,\n    ineligibleSubTitle,\n    continueBtn1,\n    continueBtn2,\n    errorMsg,\n    lang;\n\nlet count = 5;\nconst debugEnabled = getUrlParameter('d') === '1';\nconst defaultLanguages = ['es', 'en', 'pt'];\nconst defaultCountries = ['mx'];\n\nconst translations = {\n    en: {\n        loading: 'Loading',\n        peTitle: 'Participate to win megas',\n        peSubTitle: 'Please verify your mobile number to continue.',\n        peSubmitBtn: 'Confirm',\n        rewardTextEligible: 'Your phone number is eligible for data rewards.',\n        redirectBtn: 'Redirect',\n        ineligibleTitle: 'Sorry, your phone number is not eligible for data rewards at this time.',\n        ineligibleSubTitle: 'Do you want to continue without reward?',\n        continueBtn: 'Continue without reward',\n        errorMsg: 'Sorry, we were unable to process your request at this time.'\n    },\n    es: {\n        loading: 'Cargando',\n        peTitle: 'Participa para ganar Megas',\n        peSubTitle: 'Solo confirma tu número de teléfono',\n        peSubmitBtn: 'Confirmar ahora',\n        rewardTextEligible: 'Tu número participa para ganar megas.',\n        redirectBtn: 'Redireccionar ahora',\n        ineligibleTitle: 'Lo sentimos, tú número no participa para ganar megas en este momento.',\n        ineligibleSubTitle: '¿Deseas continuar sin ganar megas?',\n        continueBtn: 'Continuar sin ganar megas',\n        errorMsg: 'Lo sentimos. No hemos podido procesar tu solicitud en este momento.'\n    },\n    pt: {\n        loading: 'Carregando',\n        peTitle: 'Participe e ganhe Megas',\n        peSubTitle: 'Por favor, confirme o número de seu telefone para continuar.',\n        peSubmitBtn: 'Confirmar',\n        rewardTextEligible: 'Seu número de telefone é elegível a recompensa em pacotes de dados.',\n        redirectBtn: 'Redirecionar',\n        ineligibleTitle: 'Desculpe, seu número de telefone nao é elegível a recompensa em pacotes de dados desta vez.',\n        ineligibleSubTitle: 'Gostaria de continuar sem a recompensa?',\n        continueBtn: 'Continuar sem a recompensa',\n        errorMsg: 'Desculpe. Não podemos processar sua solicitação neste momento.'\n    }\n}\n\n/*------------------------ CUSTOM METHODS ------------------------------------*/\n\nfunction appendIframe(targetId){\n    targetEl = document.querySelector(\"#\" + targetId);\n\n    // Calculating actual rendered values for Target Tag's Width and Height in case they are NOT set by CSS.\n    // If these values are lower than iframes's minWidth or minHeight, they will be set by default.\n    const iframeWidth = targetEl.scrollWidth < parseInt(iframeTag.minWidth.substring(0,3)) ? parseInt(iframeTag.minWidth.substring(0,3)) : targetEl.scrollWidth;\n    const iframeHeight = targetEl.scrollHeight < parseInt(iframeTag.minHeight.substring(0,3)) ? parseInt(iframeTag.minHeight.substring(0,3)) : targetEl.scrollHeight;\n\n    iframeTag.style.width = iframeWidth + \"px\";\n    iframeTag.style.height = iframeHeight + \"px\";\n    targetEl && targetEl.appendChild(iframeTag);\n    document.querySelector('#iframe-01').addEventListener(\"load\", ev => {\n        iframe = document.querySelector('#iframe-01');\n        initializeElementsVar();\n        initializePhoneInput();\n        setLangText();\n    });\n}\n\nfunction setLangText(){\n    const navigatorLang = (navigator.languages && navigator.languages.length) ? navigator.languages[0]\n        : navigator.userLanguage || navigator.language || navigator.browserLanguage || 'en';\n    lang = navigatorLang.substring(0, 2);\n    const languages = copyOptions.languages || defaultLanguages;\n\n    if(languages){\n        if (languages.find(item => item === lang)){\n            setInnerHtml(lang);\n        } else {\n            setInnerHtml(languages[0]);\n            lang = languages[0];\n        }\n    } else {\n        setInnerHtml('es');\n        lang = 'es';\n    }\n\n}\n\nfunction setInnerHtml(lang){\n    loading.innerHTML = translations[lang].loading;\n    peTitle.innerHTML = translations[lang].peTitle;\n    peSubTitle.innerHTML = translations[lang].peSubTitle;\n    peSubmitBtn.value = translations[lang].peSubmitBtn;\n    rewardTextEligible.innerHTML = translations[lang].rewardTextEligible;\n    redirectBtn.innerHTML = translations[lang].redirectBtn;\n    ineligibleTitle.innerHTML = translations[lang].ineligibleTitle;\n    ineligibleSubTitle.innerHTML = translations[lang].ineligibleSubTitle;\n    continueBtn1.innerHTML = translations[lang].continueBtn;\n    continueBtn2.innerHTML = translations[lang].continueBtn;\n    errorMsg.innerHTML = translations[lang].errorMsg;\n}\n\nfunction createScriptTags(){\n\n    const tagAttrs = [\n        {\n            name: 'link',\n            href: 'https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.11.2/css/all.min.css',\n            integrity: 'sha256-+N4/V/SbAFiW1MPBCXnfnP9QSN3+Keu+NlB+0ev/YKQ=',\n            crossorigin: 'anonymous'\n        },\n        {\n            name: 'link',\n            href: 'https://cdnjs.cloudflare.com/ajax/libs/intl-tel-input/16.0.4/css/intlTelInput.css',\n            integrity: 'sha256-rTKxJIIHupH7lFo30458ner8uoSSRYciA0gttCkw1JE=',\n            crossorigin: 'anonymous'\n        },\n        {\n            name: 'link',\n            href: 'styles/main.css'\n        },\n        {\n            name: 'script',\n            src: 'https://cdnjs.cloudflare.com/ajax/libs/intl-tel-input/16.0.4/js/intlTelInput-jquery.min.js',\n            integrity: 'sha256-s0v2VDVLbAqGy/FEK0588AtGkSz0aOb6ibQCPCkk4Bk=',\n            crossorigin: 'anonymous'\n        },\n        {\n            name: 'script',\n            src: 'https://cdnjs.cloudflare.com/ajax/libs/intl-tel-input/16.0.4/js/intlTelInput.min.js',\n            integrity: 'sha256-Gf8PGNhkyd/4AuPWG7theaqc8hAvHzocloCkDN9pXFw=',\n            crossorigin: 'anonymous'\n\n        },\n        {\n            name: 'script',\n            src: 'https://cdnjs.cloudflare.com/ajax/libs/intl-tel-input/16.0.4/js/utils.js',\n            integrity: 'sha256-271j3cFogB3oRK1PLEHwasgC+sTkKr0f1I37LU9Qkyk=',\n            crossorigin: 'anonymous'\n        }\n    ];\n\n    let customTag;\n\n    for (let i = 0; i < tagAttrs.length; i++){\n        customTag = document.createElement(tagAttrs[i].name);\n\n        if (tagAttrs[i].integrity){\n            customTag.integrity = tagAttrs[i].integrity\n        }\n\n        if (tagAttrs[i].crossorigin){\n            customTag.setAttribute(\"crossorigin\", tagAttrs[i].crossorigin);\n        }\n\n        if (tagAttrs[i].name === 'link'){\n            customTag.rel = 'stylesheet';\n            customTag.href = tagAttrs[i].href;\n            document.head.appendChild(customTag);\n        }\n\n        if (tagAttrs[i].name === 'script') {\n            customTag.type = 'text/javascript';\n            customTag.src = tagAttrs[i].src;\n            document.body.appendChild(customTag);\n        }\n    }\n}\n\nfunction createIframe(){\n    iframeTag = document.createElement('iframe');\n    if (!document.getElementById(\"iframe-01\")){\n        iframeTag.minWidth = '250px';\n        iframeTag.minHeight = '300px';\n        iframeTag.src = \"iframeContent.html\";\n        iframeTag.id = \"iframe-01\";\n        iframeTag.style.border = \"none\";\n        iframeTag.style.position = \"absolute\";\n        iframeTag.style.backgroundColor = \"#fff\";\n        iframeTag.classList.add(\"hide\");\n    }\n}\n\nfunction getUrlParameter(sParam) {\n    let sPageURL = window.location.search.substring(1),\n        sURLVariables = sPageURL.split('&'),\n        sParameterName,\n        i;\n\n    for (i = 0; i < sURLVariables.length; i++) {\n        sParameterName = sURLVariables[i].split('=');\n\n        if (sParameterName[0] === sParam) {\n            return sParameterName[1] === undefined ? true : decodeURIComponent(sParameterName[1]);\n        }\n    }\n}\n\nfunction debug(message, options){\n    if (debugEnabled) {\n        if(options){\n            console.log(message, options);\n        } else {\n            console.log(message);\n        }\n    }\n}\n\nfunction initializeElementsVar(){\n    loading = iframeGetElem('preload');\n    eligibleElement = iframeGetElem('eligibleWrapper');\n    errorElement = iframeGetElem('errorWrapper');\n    ineligibleMsgElement = iframeGetElem('ineligibleMessage');\n    icon = iframeGetElem('icon');\n    text = iframeGetElem('rewardText');\n    phoneEntry = iframeGetElem('phoneEntryWrapper');\n    eligibleUI = iframeGetElem('eligible');\n    ineligibleUI = iframeGetElem('ineligible');\n    timer = iframeGetElem('timer');\n    rewardTextEligible = iframeGetElem('rewardTextEligible');\n    phoneCheck = iframeGetElem('phoneCheck');\n    input = iframeGetElem('phone');\n    peTitle = iframeGetElem('peTitle');\n    peSubTitle = iframeGetElem('peSubTitle');\n    peSubmitBtn = iframeGetElem('peSubmitBtn');\n    redirectBtn = iframeGetElem('redirectBtn');\n    ineligibleTitle = iframeGetElem('ineligibleTitle');\n    ineligibleSubTitle = iframeGetElem('ineligibleSubTitle');\n    continueBtn1 = iframeGetElem('continueBtn1');\n    continueBtn2 = iframeGetElem('continueBtn2');\n    errorMsg = iframeGetElem('errorMsg');\n}\n\nfunction initializePhoneInput(){\n\n    const inputTelOptions = {\n        allowDropdown: true,\n        formatOnDisplay: true,\n        initialCountry: \"mx\",\n        nationalMode: false,\n        onlyCountries: copyOptions.countries || defaultCountries,\n        separateDialCode: true\n    };\n    iti = input && window.intlTelInput(input, inputTelOptions);\n}\n\nfunction createCopyOptions(options){\n    copyOptions = Object.assign({}, options);\n}\n\nfunction createCopyResponse(response){\n    copyResponse = Object.assign({}, response);\n}\n\nfunction iframeGetElem(id) {\n    const iframeWindow = iframe.contentWindow || iframe.contentDocument;\n    return iframeWindow.document.querySelector(\"#\" + id);\n}\n\nfunction validatePhoneNumber(){\n    copyOptions.phoneNumber = iti.getNumber().replace('+', '');\n    checkAppEligibilityPhoneEntry(copyOptions);\n}\n\nfunction countDown(){\n    let timer = iframeGetElem(\"timer\");\n    let loadingTxtOne, loadingTxtTwo;\n    if (lang === 'en'){\n        loadingTxtOne = \"Redirecting in \";\n        loadingTxtTwo = \" seconds.\"\n    }\n    if (lang === 'es'){\n        loadingTxtOne = \"Redireccionar en \";\n        loadingTxtTwo = \" segundos.\"\n    }\n    if (lang === 'pt'){\n        loadingTxtOne = \"Redirecionando em \";\n        loadingTxtTwo = \" segundos.\"\n    }\n    if (count > 0) {\n        count--;\n        timer.innerHTML = loadingTxtOne + count + loadingTxtTwo;\n        setTimeout(countDown, 1000);\n    } else {\n        redirectToTarget();\n    }\n}\n\nlet deviceDetails;\n\n// Note: Both navigator.userAgent and navigator.platform can be faked by the user or a browser extension.\n// The following function confirms if is iOS\nfunction iOS() {\n    let iOsDevices = [\n        'iPad Simulator',\n        'iPhone Simulator',\n        'iPod Simulator',\n        'iPad',\n        'iPhone',\n        'iPod'\n    ]\n\n    if (navigator.platform) {\n        while (iOsDevices.length) {\n            if (navigator.platform === iOsDevices.pop()) { return true }\n        }\n    }\n    return false\n}\n\nfunction getDeviceDetails() {\n    // Avoid re-calculating multiple times\n    if (deviceDetails) return deviceDetails;\n\n    const navU = navigator.userAgent;\n    const isAndroidMobile = navU.indexOf('Android') > -1 && navU.indexOf('Mozilla/5.0') > -1 && navU.indexOf('AppleWebKit') > -1;\n\n    deviceDetails = {\n        isAndroid: isAndroidMobile,\n        isIOS: iOS()\n    }\n\n    return deviceDetails\n}\n\nfunction getDeviceUrl(){\n\n    const deviceDetails = getDeviceDetails();\n    const isAndroid = deviceDetails.isAndroid;\n    const isIOS = deviceDetails.isIOS;\n\n    if(isAndroid && copyOptions.targetUrlAndroid){\n        return copyOptions.targetUrlAndroid\n    }\n\n    if(isIOS && copyOptions.targetUrlIOS){\n        return copyOptions.targetUrlIOS\n    }\n\n    if(!copyOptions.targetUrl){\n       alert('NO Url provided');\n       return null;\n    }\n\n    return copyOptions.targetUrl;\n}\n\nfunction getFinalUrl(){\n    const clickId = copyResponse.clickId || null;\n    let clickUrl = copyResponse.clickUrl || null;\n\n    // Use passed URL and fallback to URL in query and replace clickId\n    if (isEligible){\n        const url = clickUrl || getDeviceUrl();\n        return url.replace(\"$$clickId$$\", clickId || '');\n    } else {\n        return getDeviceUrl();\n    }\n}\n\nfunction redirectToTarget(){\n    const finalUrl = getFinalUrl();\n    debug('Redirecting to', finalUrl);\n    copyResponse.redirectUrl = finalUrl;\n    !debugEnabled && copyOptions.onComplete(copyResponse);\n}\n\nwindow.onload = function(){\n\n    if (typeof jQuery === 'undefined'){\n        let jqTag = document.createElement('script');\n        jqTag.src = 'https://cdnjs.cloudflare.com/ajax/libs/jquery/3.4.1/jquery.min.js';\n        jqTag.integrity = 'sha256-CSXorXvZcTkaix6Yvo6HppcZGetbYMGWSFlBw8HfCJo=';\n        jqTag.setAttribute('crossorigin', 'anonymous');\n        document.head.appendChild(jqTag);\n    }\n\n    createScriptTags();\n    createIframe();\n\n    // addEventListener support for IE8\n    function bindEvent(element, eventName, eventHandler) {\n        if (element.addEventListener){\n            element.addEventListener(eventName, eventHandler, false);\n        } else if (element.attachEvent) {\n            element.attachEvent('on' + eventName, eventHandler);\n        }\n    }\n\n    // Listen to message from iframe\n    bindEvent(window, 'message', function (e) {\n        const eventName = e.data;\n\n        if(eventName === 'submitPhoneEntry'){\n            validatePhoneNumber();\n        }\n\n        if(eventName === 'redirectUrl'){\n            redirectToTarget();\n        }\n    });\n\n}\n\n\n\n\n\n\n\n//# sourceURL=webpack://aqutoFlows/./src/aquto.flows.js?");

/***/ })

/******/ });